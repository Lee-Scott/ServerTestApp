{"ast":null,"code":"import { Observable, throwError } from 'rxjs';\nimport { tap, catchError } from 'rxjs/operators';\nimport { Status } from '../enum/status.enum';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ServerService {\n  // Dependency injection\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:8080';\n    /* non reactive way\r\n    getServers(): Observable<CustomResponse>{\r\n      return this.http.get<CustomResponse>(`http:/localhost:8080/server/list`);\r\n    }\r\n    */\n    // observable as noted with $\n    this.server$ = this.http.get(`${this.apiUrl}/server/list`).pipe(tap(console.log), catchError(this.handleError));\n    this.save$ = server => this.http.post(`${this.apiUrl}/server/save`, server).pipe(tap(console.log), catchError(this.handleError));\n    this.ping$ = ipAdress => this.http.get(`${this.apiUrl}/server/ping/${ipAdress}`).pipe(tap(console.log), catchError(this.handleError));\n    this.filter$ = (status, response) =>\n    // filter all the servers by a specific status\n    new Observable(\n    // create a observable \n    // create a observable \n    subscriber => {\n      console.log(response);\n      subscriber.next(status === Status.ALL ? Object.assign(Object.assign({}, response), {\n        message: `Servers filtered by ${status} status`\n      }) :\n      // case of status == all\n      Object.assign(Object.assign({}, response), {\n        message: response.data.servers // override message \n        .filter(server => server.status === status).length > 0 ?\n        // filter the servers if length \n        `Servers filtered by ${status === Status.SERVER_UP ? 'SEVER UP' : 'SERVER DOWN'} status` :\n        // set message to up or down\n        `No server of ${status} found`,\n        data: {\n          servers: response.data.servers // filter the date and return to the user\n          .filter(server => server.status === status)\n        }\n      }));\n      subscriber.complete(); // sub and smash that like button\n    }).pipe(\n    // can call on above becurse it returns an observable\n    tap(console.log), catchError(this.handleError) // catch error\n    );\n\n    this.delete$ = serverId => this.http.delete(`${this.apiUrl}/server/delete/${serverId}`).pipe(tap(console.log), catchError(this.handleError));\n  }\n  // for debug\n  // TODO make more robust\n  handleError(error) {\n    console.log(error);\n    console.log(error);\n    return throwError('An error occurred - Error code: ${error.status}');\n  }\n}\nServerService.ɵfac = function ServerService_Factory(t) {\n  return new (t || ServerService)(i0.ɵɵinject(i1.HttpClient));\n};\nServerService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ServerService,\n  factory: ServerService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["Observable","throwError","tap","catchError","Status","ServerService","constructor","http","get","apiUrl","pipe","console","log","handleError","server","post","ipAdress","status","response","subscriber","next","ALL","Object","message","data","servers","filter","length","SERVER_UP","complete","serverId","delete","error","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\lhs49\\Desktop\\Playspace\\reactive-spring\\serverapp\\src\\app\\service\\server.service.ts"],"sourcesContent":["import { HttpClient, HttpErrorResponse } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable,Subscriber,throwError } from 'rxjs';\nimport { tap, catchError } from 'rxjs/operators';\nimport { Status } from '../enum/status.enum';\nimport { CustomResponse } from '../interface/custom-response';\nimport { Server } from '../interface/server';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ServerService {\n  \n  private readonly apiUrl = 'http://localhost:8080';\n\n  // Dependency injection\n  constructor(private http: HttpClient) { }\n\n  /* non reactive way\n  getServers(): Observable<CustomResponse>{\n    return this.http.get<CustomResponse>(`http:/localhost:8080/server/list`);\n  }\n  */\n\n  // observable as noted with $\n  server$ =  <Observable <never>>\n  this.http.get<CustomResponse>(`${this.apiUrl}/server/list`)\n  .pipe(\n    tap(console.log),\n    catchError(this.handleError)\n  );\n\n  save$ =  (server: Server) => <Observable <never>>\n  this.http.post<CustomResponse>(`${this.apiUrl}/server/save`, server)\n  .pipe(\n    tap(console.log),\n    catchError(this.handleError)\n  );\n\n  ping$ =  (ipAdress: string) => <Observable <never>>\n  this.http.get<CustomResponse>(`${this.apiUrl}/server/ping/${ipAdress}`)\n  .pipe(\n    tap(console.log),\n    catchError(this.handleError)\n  );\n\n  filter$ =  (status: Status, response: CustomResponse) => <Observable <never>> // filter all the servers by a specific status\n  new Observable<CustomResponse>( // create a observable \n    subscriber => { // call back function takes a subscriber\n      console.log(response);\n      subscriber.next(\n          status === Status.ALL ? {...response, message: `Servers filtered by ${status} status`} :  // case of status == all\n          { // case status != all\n            ...response,\n            message: response.data.servers  // override message \n            .filter(server => server.status === status).length > 0 ? // filter the servers if length \n            `Servers filtered by ${status === Status.SERVER_UP ? 'SEVER UP' : 'SERVER DOWN'} status` : // set message to up or down\n            `No server of ${status} found`, // case of no up or down server \n            data: { servers: response.data.servers // filter the date and return to the user\n              .filter(server => server.status === status)}\n          }\n      );\n      subscriber.complete(); // sub and smash that like button\n    }\n  )\n  .pipe( // can call on above becurse it returns an observable\n    tap(console.log),\n    catchError(this.handleError) // catch error\n  );\n\n  delete$ =  (serverId: number) => <Observable <never>>\n  this.http.delete<CustomResponse>(`${this.apiUrl}/server/delete/${serverId}`)\n  .pipe(\n    tap(console.log),\n    catchError(this.handleError)\n  );\n\n\n  // for debug\n  // TODO make more robust\n  private handleError(error: HttpErrorResponse): Observable <never> {\n    console.log(error)\n    console.log(error)\n    return throwError ('An error occurred - Error code: ${error.status}');\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}