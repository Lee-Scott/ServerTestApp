{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { ChangeDetectionStrategy, Component } from '@angular/core';\nimport { BehaviorSubject, of } from 'rxjs';\nimport { catchError, map, startWith } from 'rxjs/operators';\nimport { DataState } from './enum/data-state.enum';\nimport { Status } from './enum/status.enum';\nlet AppComponent = class AppComponent {\n  constructor(serverService, NotificationService) {\n    this.serverService = serverService;\n    this.NotificationService = NotificationService;\n    this.DataState = DataState;\n    this.Status = Status;\n    this.filterSubject = new BehaviorSubject('');\n    this.dataSubject = new BehaviorSubject(null);\n    this.filterStatus$ = this.filterSubject.asObservable();\n    this.isLoading = new BehaviorSubject(false);\n    this.isLoading$ = this.isLoading.asObservable();\n  } // injection \n  // like a runnable in java, runs on startup\n  ngOnInit() {\n    this.appState$ = this.serverService.server$ // subscribe this observable that makes a http request \n    .pipe(map(response => {\n      this.dataSubject.next(response); // save the response in the dataSubject for pingServer()\n      return {\n        dataState: DataState.LOADED_STATE,\n        appData: response\n      };\n    }), startWith({\n      dataState: DataState.LOADING_STATE\n    }),\n    // waiting for data so we omit response\n    catchError(error => {\n      return of({\n        dataState: DataState.ERROR_STATE,\n        error\n      }); // if we catch an error\n    }));\n  }\n\n  pingServer(ipAddress) {\n    this.filterSubject.next(ipAddress);\n    this.appState$ = this.serverService.ping$(ipAddress).pipe(map(response => {\n      const index = this.dataSubject.value.data.servers.findIndex(server => server.id === response['data.server.id']);\n      this.dataSubject.value.data.servers[index] = response['data.server'];\n      this.filterSubject.next('');\n      return {\n        dataState: DataState.LOADED_STATE,\n        appData: this.dataSubject.value\n      };\n    }), startWith({\n      dataState: DataState.LOADED_STATE,\n      appData: this.dataSubject.value\n    }), catchError(error => {\n      this.filterSubject.next('');\n      return of({\n        dataState: DataState.ERROR_STATE,\n        error\n      });\n    }));\n  }\n  // Not getting any new data from the backend because we already have it in response\n  filterServers(status) {\n    this.appState$ = this.serverService.filter$(status, this.dataSubject.value).pipe(map(response => {\n      return {\n        dataState: DataState.LOADED_STATE,\n        appData: response\n      };\n    }), startWith({\n      dataState: DataState.LOADED_STATE,\n      appData: this.dataSubject.value\n    }), catchError(error => {\n      return of({\n        dataState: DataState.ERROR_STATE,\n        error\n      });\n    }));\n  }\n  saveServer(serverForm) {\n    this.isLoading.next(true);\n    this.appState$ = this.serverService.save$(serverForm.value).pipe(map(response => {\n      this.dataSubject.next(Object.assign(Object.assign({}, response), {\n        data: {\n          servers: [response[\"data.server\"], ...response[\"this.dataSubject.value.server\"]]\n        }\n      }));\n      document.getElementById('closeModal').click(); // closes the modal\n      this.isLoading.next(false);\n      serverForm.resetForm({\n        status: this.Status.SERVER_DOWN\n      }); // have server down as a default\n      return {\n        dataState: DataState.LOADED_STATE,\n        appData: this.dataSubject.value\n      };\n    }), startWith({\n      dataState: DataState.LOADED_STATE,\n      appData: this.dataSubject.value\n    }), catchError(error => {\n      this.isLoading.next(true);\n      return of({\n        dataState: DataState.ERROR_STATE,\n        error\n      });\n    }));\n  }\n  deleteServer(server) {\n    this.appState$ = this.serverService.delete$(server.id).pipe(map(response => {\n      this.dataSubject.next(Object.assign(Object.assign({}, response), {\n        data: {\n          servers: this.dataSubject.value.data.servers.filter(serverS => serverS.id !== server.id)\n        }\n      }));\n      return {\n        dataState: DataState.LOADED_STATE,\n        appData: this.dataSubject.value\n      };\n    }), startWith({\n      dataState: DataState.LOADED_STATE,\n      appData: this.dataSubject.value\n    }), catchError(error => {\n      return of({\n        dataState: DataState.ERROR_STATE,\n        error\n      });\n    }));\n  }\n  printReport() {\n    window.print();\n    // TODO ADD OPTION Make dropdown\n    /* print for excel\r\n    let dataType = 'application/vnd.ms-excel.sheet.marcoEnabled.12';\r\n    let tableSelect = document.getElementById('servers');\r\n    let tableHtml = tableSelect.outerHTML.replace(/ /g, '%20')// replaces spaces with value of space...\r\n    let downloadLink = document.createElement('a');\r\n    document.body.appendChild(downloadLink); // put link in as a child\r\n    downloadLink.href = 'data:' + dataType + \", \" + tableHtml;\r\n    downloadLink.download = 'server-report.xls';\r\n    downloadLink.click();\r\n    document.body.removeChild(downloadLink); // takes the link out\r\n    */\n  }\n};\n\nAppComponent = __decorate([Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})], AppComponent);\nexport { AppComponent };","map":{"version":3,"mappings":"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","names":["ChangeDetectionStrategy","Component","BehaviorSubject","of","catchError","map","startWith","DataState","Status","AppComponent","constructor","serverService","NotificationService","filterSubject","asObservable","isLoading","ngOnInit","appState$","server$","pipe","response","dataSubject","next","dataState","LOADED_STATE","appData","LOADING_STATE","error","ERROR_STATE","pingServer","ipAddress","ping$","index","value","data","servers","findIndex","server","id","filterServers","status","filter$","saveServer","serverForm","save$","document","getElementById","click","resetForm","SERVER_DOWN","deleteServer","delete$","filter","serverS","printReport","window","print","selector","templateUrl","styleUrls","changeDetection","OnPush"],"sourceRoot":"","sources":["C:\\Users\\lhs49\\Desktop\\Playspace\\reactive-spring\\serverapp\\src\\app\\app.component.ts"],"sourcesContent":["import { ChangeDetectionStrategy, Component, OnInit } from '@angular/core';\nimport { NgForm } from '@angular/forms';\nimport { BehaviorSubject, Observable, of } from 'rxjs';\nimport { catchError, map, startWith } from 'rxjs/operators';\nimport { DataState } from './enum/data-state.enum';\nimport { Status } from './enum/status.enum';\nimport { AppState } from './interface/app-state';\nimport { CustomResponse } from './interface/custom-response';\nimport { Server } from './interface/server';\n\nimport { ServerService } from './service/server.service';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css'],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class AppComponent implements OnInit{\n  appState$: Observable<AppState<CustomResponse>>;\n  readonly DataState = DataState;\n  readonly Status = Status;\n  private filterSubject = new BehaviorSubject<string>('');\n  private dataSubject = new BehaviorSubject<CustomResponse>(null);\n  filterStatus$ = this.filterSubject.asObservable();\n  private isLoading = new BehaviorSubject<boolean>(false);\n  isLoading$ = this.isLoading.asObservable();\n\n\n\n  constructor(private serverService: ServerService, private NotificationService: NotificationService){} // injection \n\n  // like a runnable in java, runs on startup\n  ngOnInit(): void {\n    this.appState$ = this.serverService.server$ // subscribe this observable that makes a http request \n    .pipe(\n      map(response => { // callback when ever there is a response from the server\n        this.dataSubject.next(response) // save the response in the dataSubject for pingServer()\n        return { dataState: DataState.LOADED_STATE, appData: response}\n      }),\n      startWith({dataState: DataState.LOADING_STATE}), // waiting for data so we omit response\n      catchError((error: string) => {\n        return of ({dataState: DataState.ERROR_STATE, error }) // if we catch an error\n      })\n    );\n  }\n\n  pingServer(ipAddress: string): void {\n    this.filterSubject.next(ipAddress);\n    this.appState$ = this.serverService.ping$(ipAddress)\n      .pipe(\n        map(response => {\n          const index = this.dataSubject.value.data.servers.findIndex(server =>  server.id === response['data.server.id']);\n          this.dataSubject.value.data.servers[index] = response['data.server'];\n          this.filterSubject.next('');\n          return { dataState: DataState.LOADED_STATE, appData: this.dataSubject.value }\n        }),\n        startWith({ dataState: DataState.LOADED_STATE, appData: this.dataSubject.value }),\n        catchError((error: string) => {\n          this.filterSubject.next('');\n          return of({ dataState: DataState.ERROR_STATE, error });\n        })\n      );\n  }\n\n  // Not getting any new data from the backend because we already have it in response\n\n  filterServers(status: Status): void {\n    \n    this.appState$ = this.serverService.filter$(status, this.dataSubject.value)\n      .pipe(\n        map(response => {\n          return { dataState: DataState.LOADED_STATE, appData: response }\n        }),\n        startWith({ dataState: DataState.LOADED_STATE, appData: this.dataSubject.value }),\n        catchError((error: string) => {\n          \n          return of({ dataState: DataState.ERROR_STATE, error });\n        })\n      );\n  }\n\n  saveServer(serverForm: NgForm): void {\n    this.isLoading.next(true);\n    this.appState$ = this.serverService.save$(<Server> serverForm.value)\n      .pipe(\n        map(response => {\n          this.dataSubject.next(\n            {...response as CustomResponse, data: { servers: [response[\"data.server\"], ...response[\"this.dataSubject.value.server\"] ]} }\n          );\n          document.getElementById('closeModal').click(); // closes the modal\n          this.isLoading.next(false);\n          serverForm.resetForm( { status: this.Status.SERVER_DOWN }) // have server down as a default\n          return { dataState: DataState.LOADED_STATE, appData: this.dataSubject.value }\n        }),\n        startWith({ dataState: DataState.LOADED_STATE, appData: this.dataSubject.value }),\n        catchError((error: string) => {  \n          this.isLoading.next(true);\n          return of({ dataState: DataState.ERROR_STATE, error });\n        })\n      );\n  }\n  \n  deleteServer(server: Server): void {\n    this.appState$ = this.serverService.delete$(server.id)\n      .pipe(\n        map(response => {\n          this.dataSubject.next(\n            { ...response as CustomResponse, data: { servers: this.dataSubject.value.data.servers.filter(serverS => serverS.id !== server.id)}}\n          );\n          return { dataState: DataState.LOADED_STATE, appData: this.dataSubject.value }\n        }),\n        startWith({ dataState: DataState.LOADED_STATE, appData: this.dataSubject.value }),\n        catchError((error: string) => {\n          return of({ dataState: DataState.ERROR_STATE, error });\n        })\n      );\n  }\n\n  printReport(): void {\n    window.print();\n\n    // TODO ADD OPTION Make dropdown\n\n    /* print for excel\n    let dataType = 'application/vnd.ms-excel.sheet.marcoEnabled.12';\n    let tableSelect = document.getElementById('servers');\n    let tableHtml = tableSelect.outerHTML.replace(/ /g, '%20')// replaces spaces with value of space...\n    let downloadLink = document.createElement('a');\n    document.body.appendChild(downloadLink); // put link in as a child \n    downloadLink.href = 'data:' + dataType + \", \" + tableHtml;\n    downloadLink.download = 'server-report.xls';\n    downloadLink.click();\n    document.body.removeChild(downloadLink); // takes the link out\n    */\n\n  }\n\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}